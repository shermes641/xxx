package models

import javax.crypto.Mac
import javax.crypto.spec.SecretKeySpec

import org.apache.commons.codec.binary.Hex
import play.api.Logger
import play.api.mvc.Controller

import scala.util.{Failure, Success, Try}

/**
  * Encapsulates the logic for verifying server to server requests from Unity Ads.
  *
  * @param appToken  The application for this callback
  * @param sid       The application ID
  * @param oid       Unique ID generated by Unity Ads
  * @param hmac      Signature generated by Unity Ads
  * @param productID The app's GAME ID
  */
case class UnityAdsCallback(appToken: String,
                            sid: String,
                            oid: String,
                            hmac: String,
                            productID: String) extends CallbackVerificationHelper with Controller {

  final val algo = "HmacMD5"
  final val BadSigningResult = ""
  final val ValidNumberOfParams = 4
  override val adProviderName = Constants.UnityAdsName
  override val token = appToken
  lazy val params = s""" appToken: "$appToken" productid: "$productID" sid: "$sid" oid: "$oid" hmac: "$hmac" """
  override val receivedVerification = hmac

  override val verificationInfo = new CallbackVerificationInfo(
    isValid,
    adProviderName,
    oid,
    token,
    payout,
    currencyAmount,
    adProviderRewardInfo)

  /**
    * Per Unity Ad's documentation, we return 1 to acknowledge that the reward process was successful.
    *
    * @return A 200 response containing 1
    */
  override def returnSuccess = Ok(Constants.UnityAdsSuccess)

  /**
    * Per Unity Ad's documentation, we return 400 response to acknowledge that the reward process was unsuccessful.
    *
    * @return A 400 response containing an error message
    */
  override def returnFailure = {
    Logger.error(s"""Unity Ads S2S callback failed $params""")
    BadRequest(Constants.UnityAdsVerifyFailure + s"""   $params""")
  }

  /**
    * Per Unity Ad's documentation, we only hash the oid and sid parameters
    *
    * @return A hash of several params from the incoming postback.
    */
  override def generatedVerification: String = {
    val sharedSecret = secretKey("APIKey")
    // verifier params must be in alphabetical order
    val verifierString = s"oid=$oid,productid=$productID,sid=$sid"

    Try {
      val keySpec = new SecretKeySpec(sharedSecret.getBytes("UTF-8"), algo)
      val mac = Mac.getInstance(algo)
      mac.init(keySpec)
      Hex.encodeHexString(mac.doFinal(verifierString.getBytes("UTF-8")))
    } match {
      case Success(encodedHexString) =>
        encodedHexString

      case Failure(e) =>
        Logger.error(s"Exception calculating Unity Ads HMAC exception: $e")
        BadSigningResult
    }
  }
}
